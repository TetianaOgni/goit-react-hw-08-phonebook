{"version":3,"file":"static/js/983.0f2c06f0.chunk.js","mappings":"mMAsCA,UAnCiB,WACf,OACE,SAAC,IAAD,CAAMA,GAAG,WACLC,MAAM,SACNC,QAAU,SACTC,QAAQ,SACPC,EAAG,EACHC,EAAE,OACFC,EAAE,QANR,UASG,UAAC,KAAD,CACCF,EAAG,GACHJ,GAAG,QACFO,QAAQ,KACRC,WAAW,SACXC,UAAU,SALZ,WAOG,SAAC,IAAD,CAAMC,WAAY,MAAOC,MAAO,SAAhC,uBAGA,UAAC,IAAD,CAAMD,WAAY,MAAOC,MAAO,OAAhC,8DACkD,kBADlD,oEAEmE,kBAFnE,6DAKA,SAAC,IAAD,CAAMD,WAAY,MAAOC,MAAO,SAAhC,+BAOT,C,6LCxBGC,GAAOC,EAAAA,EAAAA,IAAW,SAAeC,EAAOC,GAC1C,IAAMd,GAASe,EAAAA,EAAAA,IAAe,OAAQF,GACtC,GAA0DG,EAAAA,EAAAA,IAAiBH,GAA1BL,GAAjD,EAAQS,UAAR,EAAmBC,MAAnB,EAA0BC,WAA1B,EAAsCC,QAAtC,aACMC,ECdR,SAAiBC,GACf,IAAMC,EAAQC,OAAOC,OAAO,CAAC,EAAGH,GAChC,IAAK,IAAII,KAAOH,OACK,IAAfA,EAAMG,WACDH,EAAMG,GAEjB,OAAOH,CACR,CDOsBI,CAAQ,CAC3BC,UAAWf,EAAMK,MACjBf,eAAgBU,EAAMM,WACtBU,cAAehB,EAAMO,SAEvB,OAAuBU,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,GADwB,wBAGtBjB,IAAAA,EACAG,WAAWe,EAAAA,EAAAA,IAAG,cAAenB,EAAMI,YAChCI,GACAb,GANmB,IAOtB,MAAOR,IAGZ,IACDW,EAAK,YAAc,M,8KEvBfA,GAAOC,EAAAA,EAAAA,IAAW,SAAeqB,EAAOjC,GAC1C,IAAQE,EAAkE+B,EAAlE/B,UAAWgC,EAAuDD,EAAvDC,MAAOC,EAAgDF,EAAhDE,QAASC,EAAuCH,EAAvCG,KAAMC,EAAiCJ,EAAjCI,MAAOlB,EAA0Bc,EAA1Bd,KAAMN,EAAoBoB,EAApBpB,OAAWyB,GAAjE,OAA0EL,EAA1E,GACMM,EAAS,CACbhC,QAAS,OACTiC,cAAetC,EACfuC,WAAYP,EACZQ,eAAgBP,EAChBQ,SAAUP,EACVQ,UAAWP,EACXQ,SAAU1B,EACVU,WAAYhB,GAEd,OAAuBiC,EAAAA,EAAAA,KAAIf,EAAAA,EAAAA,KAAD,QAAe/B,IAAAA,EAAK,MAAOuC,GAAWD,GACjE,IACD3B,EAAK,YAAc,M,mJCdfoC,GAAMhB,EAAAA,EAAAA,GAAO,OACjBgB,EAAIC,YAAc,MAClB,IAAIrC,GAASC,EAAAA,EAAAA,IAAW,SAAiBqC,EAAOC,GAC9C,IAAQ/B,EAAwC8B,EAAxC9B,KAAR,EAAgD8B,EAAlCpC,cAAAA,OAAd,SAAuCyB,GAAvC,OAAgDW,EAAhD,GACM1C,EAASM,EAAgB,CAAE2B,QAAS,OAAQW,WAAY,SAAUtB,eAAgB,UAAa,GACrG,OAAuBuB,EAAAA,EAAAA,KACrBL,GADwB,QAGtBG,IAAAA,EACAN,QAASzB,EACTwB,OAAK,kBACApC,GADA,IAEH8C,WAAY,EACZC,SAAU,KAEThB,GAGR,IACD3B,EAAOqC,YAAc,UACRpC,EAAAA,EAAAA,IAAW,SAAiBqC,EAAOC,GAC9C,IAAQ/B,EAAkB8B,EAAlB9B,KAASmB,GAAjB,OAA0BW,EAA1B,GACA,OAAuBG,EAAAA,EAAAA,KAAIzC,GAAD,QAAWQ,KAAAA,EAAM+B,IAAAA,EAAK,aAAc,UAAaZ,GAC5E,IACMU,YAAc,Q","sources":["pages/HomePage.jsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/layout/src/flex.tsx","../node_modules/@chakra-ui/layout/src/box.tsx"],"sourcesContent":["import { Box, Flex, Text } from '@chakra-ui/react'\nimport React from 'react'\n\nconst HomePage = () => {\n  return (\n    <Flex bg=\"gray.100\"\n        align=\"center\"\n        flexDir = \"column\"\n         justify=\"center\"\n          p={5}\n          w=\"100%\"  \n          h=\"100vh\"\n        \n>\n       <Box\n        p={10}\n        bg=\"white\"\n         rounded=\"md\" \n         alignItems=\"center\"\n         textAlign=\"center\"\n         >\n          <Text fontWeight={\"700\"} color={\"purple\"}>\n            Hello!!! \n          </Text>\n          <Text fontWeight={\"400\"} color={\"teal\"}>\n            You are on the page of a very simple phone book.<br/>\n             You can register and use the application to store your contacts.<br/>\n              You can add, search by name, and delete your contacts.\n          </Text>\n          <Text fontWeight={\"700\"} color={\"purple\"}>\n            Good luck!!!!\n          </Text>\n\n      </Box>\n</Flex>\n  )\n}\n\nexport default HomePage\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n"],"names":["bg","align","flexDir","justify","p","w","h","rounded","alignItems","textAlign","fontWeight","color","props","forwardRef","styles","className","useStyleConfig","omitThemingProps","decoration","casing","rest","aliasedProps","textDecoration","object","clone","Object","assign","key","compact","textTransform","__css","Text","chakra","cx","direction","wrap","basis","grow","shrink","display","flexDirection","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","div","Flex","displayName","Square","size","centerContent","boxSize","Box","Circle","borderRadius"],"sourceRoot":""}