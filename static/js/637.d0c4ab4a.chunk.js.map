{"version":3,"file":"static/js/637.d0c4ab4a.chunk.js","mappings":"+SA4EA,UA1DkB,WAEhB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAASF,EAAAA,EAAAA,IAAYG,EAAAA,IAArBD,MACEE,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,SAAU,SAACC,GACXb,GAASc,EAAAA,EAAAA,IAAeD,GACvB,IAGH,OAAIX,GAAsB,SAAC,KAAD,CAAUa,GAAG,eAGrC,UAAC,IAAD,CAAMC,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAtD,WACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAA9B,UACE,iBAAMT,SAAUL,EAAOe,aAAvB,UACE,UAAC,IAAD,CAAQC,QAAS,EAAGN,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAWO,QAAQ,QAAnB,oBACA,SAAC,EAAAC,EAAD,CACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,QAAQ,SACRC,SAAUvB,EAAOwB,aACjBC,MAAOzB,EAAOM,OAAOH,MACrBuB,UAAQ,QAGZ,UAAC,KAAD,YACE,SAAC,IAAD,CAAWT,QAAQ,WAAnB,uBACA,SAAC,EAAAC,EAAD,CACEC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,QAAQ,SACRC,SAAUvB,EAAOwB,aACjBC,MAAOzB,EAAOM,OAAOF,SACrBuB,UAAW,EACXD,UAAQ,QAGZ,SAAC,IAAD,CAAQL,KAAK,SAASO,YAAY,SAASC,MAAM,OAAjD,0BAML/B,IAAS,SAAC,IAAD,CAAMgC,GAAI,MAAOC,MAAO,UAAxB,SAAoCjC,MAGvD,C,gFC1EM,IAAMC,EAAiB,SAAAiC,GAAK,OAAIA,EAAMC,QAAV,EACtBC,EAAe,SAAAF,GAAK,OAAIA,EAAMG,MAAV,C,6LCW7BC,GAAOC,EAAAA,EAAAA,IAAW,SAAeC,EAAOC,GAC1C,IAAM7B,GAAS8B,EAAAA,EAAAA,IAAe,OAAQF,GACtC,GAA0DG,EAAAA,EAAAA,IAAiBH,GAA1BI,GAAjD,EAAQC,UAAR,EAAmBC,MAAnB,EAA0BC,WAA1B,EAAsCC,QAAtC,aACMC,ECdR,SAAiBC,GACf,IAAMC,EAAQC,OAAOC,OAAO,CAAC,EAAGH,GAChC,IAAK,IAAII,KAAOH,OACK,IAAfA,EAAMG,WACDH,EAAMG,GAEjB,OAAOH,CACR,CDOsBI,CAAQ,CAC3BC,UAAWhB,EAAMM,MACjB/B,eAAgByB,EAAMO,WACtBU,cAAejB,EAAMQ,SAEvB,OAAuBU,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,GADwB,wBAGtBlB,IAAAA,EACAI,WAAWe,EAAAA,EAAAA,IAAG,cAAepB,EAAMK,YAChCI,GACAL,GANmB,IAOtB,MAAOhC,IAGZ,IACD0B,EAAK,YAAc,M","sources":["pages/LoginPage.jsx","redux/selectors.js","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginUserThunk } from \"redux/operations\";\nimport { useFormik } from \"formik\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  Text\n} from \"@chakra-ui/react\";\nimport { selectAuthenticated } from 'redux/authReducer';\nimport {selectContacts} from \"../redux/selectors\"\nimport { Navigate } from 'react-router-dom';\n\nconst LoginPage = () => {\n  \n  const dispatch = useDispatch()\n  const authenticated = useSelector(selectAuthenticated)\n  const { error} = useSelector(selectContacts)\n      const formik = useFormik({\n        initialValues: { \n          email: \"\",\n          password: \"\",  \n        },\n        onSubmit: (values) => {\n        dispatch(loginUserThunk(values))\n        }\n      });\n\n      if (authenticated) return <Navigate to=\"/contacts\"/>\n\n      return (\n        <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h=\"100vh\">\n          <Box bg=\"white\" p={6} rounded=\"md\">\n            <form onSubmit={formik.handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email</FormLabel>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    onChange={formik.handleChange}\n                    value={formik.values.email}\n                    required\n                  />\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    onChange={formik.handleChange}\n                    value={formik.values.password}\n                    minLength={7}\n                    required\n                  />\n                </FormControl>\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          </Box>\n          {error && <Text fw={\"700\"} color={\"red.100\"}>{error}</Text>}\n        </Flex>\n      )\n}\n\nexport default LoginPage\n","export const selectContacts = state => state.contacts\nexport const selectFilter = state => state.filter \n\nexport const selectLoading = state => state.auth.isLoading\nexport const selectError = state => state.auth.error\nexport const selectToken = state => state.auth.token\nexport const selectUserData = state => state.auth.userData\nexport const selectAuthenticated = state => state.auth.authenticated","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["dispatch","useDispatch","authenticated","useSelector","selectAuthenticated","error","selectContacts","formik","useFormik","initialValues","email","password","onSubmit","values","loginUserThunk","to","bg","align","justify","h","p","rounded","handleSubmit","spacing","htmlFor","I","id","name","type","variant","onChange","handleChange","value","required","minLength","colorScheme","width","fw","color","state","contacts","selectFilter","filter","props","forwardRef","styles","className","useStyleConfig","omitThemingProps","textAlign","decoration","casing","rest","aliasedProps","textDecoration","object","clone","Object","assign","key","compact","textTransform","__css","Text","chakra","cx"],"sourceRoot":""}